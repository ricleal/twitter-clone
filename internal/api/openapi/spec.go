// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RVPW/bMBD9K8K1o2A5zaatTYHAQIcMzhR4YKSTw4AiGfLYQDD03wt+WLZsJbbTokAm",
	"Ebw78t6798QNVKrVSqIkC+UGbPWELQvL5Ssi+YU2SqMhjmG7UpJQhgB1GqEES4bLNfQ58NpvN8q0jKAE",
	"53gN+XGas2jOSOxzMPjiuMEayofh4lS/GvLV4zNW5A++TwePO8aWcTG6L+7kHwYgWYuTBPjO3ggeoBky",
	"89TNMR5fwmWjwmGchI8tXzkRmuz73QJy+I3GciWhhKvZfDb3HSiNkmkOJVzP5rNryEEzego8FOQnGpbr",
	"OFnPEiOu5KKGEm6RljHDt2q1kjYS+G0+P5g801rwKpQWz9Z3sJWOX3HCNhR+NdhACV+KnciKpLAiyqsf",
	"UDNjWBdB12grwzVFaL+4pUw1WereJ1jXtsx02yATYojmoJWdAHen7D66F4eWfqi6uwjYGXjGcybjsD9i",
	"88p/xiBDdVYZZIR1Zl1VobWNE6I7AHwTUjIWAYdgmmux4XV/eriLOmjCsBYJjYXyYbqXxU/w8oMyCAi2",
	"oofgiDHCfI+iU55e/aW2zhzBFKIaiXFxqKBbpMhl9th50IFR7853jXIfEv6HT8I/7QKbxNbfcEkKvmeS",
	"HbJ/75GI5YMW8cUXOcTF27bjPOmPgPy0PUIfn9AdO/In8GijGi5wwhtuLzxYxOuRrad/HvGBuhFKYnqm",
	"EjcpBP2q/xMAAP//ORlW1XcIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
